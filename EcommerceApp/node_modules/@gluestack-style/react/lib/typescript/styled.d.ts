import React from 'react';
import type { OrderedSXResolved, StyleIds, IVerbosedTheme, ITheme, ExtendedConfigType, IComponentStyleConfig, StyledComponentProps } from './types';
export declare function resolveBuildTimeSx(userSX: any, verboseSx: any, utilityResolvedSX: any, componentExtendedConfig: any): {
    orderedSXResolved: any;
    STABLEHASH_sx: string;
};
export declare function getVariantProps(props: any, theme: any, shouldDeleteVariants?: boolean): {
    variantProps: any;
    restProps: any;
};
export declare function verboseStyled<P extends React.ComponentType<any>, Variants, ComCon>(Component: P, theme: Partial<IVerbosedTheme<Variants, React.ComponentProps<P>>>, componentStyleConfig?: IComponentStyleConfig<ComCon>, ExtendedConfig?: any, BUILD_TIME_PARAMS?: {
    orderedResolved: OrderedSXResolved;
    verbosedStyleIds: {
        component: StyleIds;
        descendant: StyleIds;
    };
    toBeInjected: any;
    styledIds: Array<string>;
}, nonVerbosedTheme?: any): React.ForwardRefExoticComponent<StyledComponentProps<React.ComponentProps<P>["style"], Variants, React.ComponentProps<P>, ComCon, P>>;
export declare function styled<P extends React.ComponentType<any>, Variants, ComCon>(Component: P, theme?: ITheme<Variants, React.ComponentProps<P>>, componentStyleConfig?: IComponentStyleConfig<ComCon>, ExtendedConfig?: ExtendedConfigType, BUILD_TIME_PARAMS?: {
    orderedResolved: OrderedSXResolved;
    verbosedStyleIds: {
        component: StyleIds;
        descendant: StyleIds;
    };
    toBeInjected: any;
    styledIds: Array<string>;
}): React.ForwardRefExoticComponent<StyledComponentProps<React.ComponentProps<P>["style"], Variants, React.ComponentProps<P>, ComCon, P>>;
//# sourceMappingURL=styled.d.ts.map