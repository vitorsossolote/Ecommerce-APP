{"version":3,"names":["isArray","MemoFnComponent","React","Component","createMotionAnimatedComponent","LinearGradient","setLinearGradientComponent","linearGradient","GradientHelper","render","numColors","startX","startY","endX","endY","rest","props","start","undefined","x","y","end","colors","i","push","createElement","_extends","AnimatedGradientHelper","pointToXY","point","name","MotionLinearGradient","animateProps","initialProps","propsOut","colorsAnimate","startAnimate","endAnimate","animatePropsOut","forEach","color","length","initialPropsOut","colorsInitial","startInitial","endInitial"],"sources":["LinearGradient.tsx"],"sourcesContent":["import { isArray } from '@legendapp/tools';\nimport { MemoFnComponent } from '@legendapp/tools/react';\nimport React, { Component, ComponentClass } from 'react';\nimport type { ViewProps, ViewStyle } from 'react-native';\nimport { createMotionAnimatedComponent } from './createMotionComponent';\nimport type { MotionComponentProps } from './Interfaces';\n\nexport type LinearGradientPoint = {\n    x: number;\n    y: number;\n};\n\nexport type LinearGradientProps = ViewProps & {\n    colors?: string[];\n    locations?: number[] | null;\n    start?: LinearGradientPoint | null;\n    end?: LinearGradientPoint | null;\n};\n\nlet LinearGradient;\n\nfunction setLinearGradientComponent(linearGradient) {\n    LinearGradient = linearGradient;\n}\n\ntype PropsGradient = Omit<LinearGradientProps, 'colors'> & {\n    numColors?: number;\n    startX?: number;\n    startY?: number;\n    endX?: number;\n    endY?: number;\n};\n\nclass GradientHelper extends Component<PropsGradient> {\n    render() {\n        const { numColors, startX, startY, endX, endY, ...rest } = this.props;\n\n        // Combine startX, startY, endX, endY back into start,end\n        let start;\n        if (startX !== undefined || startY !== undefined) {\n            start = {\n                x: startX,\n                y: startY,\n            };\n        }\n        let end;\n        if (endX !== undefined || endY !== undefined) {\n            end = {\n                x: endX,\n                y: endY,\n            };\n        }\n\n        // Combine individual color props back into a colors array\n        const colors: string[] = [];\n        for (let i = 0; i < numColors; i++) {\n            colors.push(rest['color' + i]);\n            delete rest['color' + i];\n        }\n\n        return <LinearGradient colors={colors} start={start} end={end} {...rest} />;\n    }\n}\n\nconst AnimatedGradientHelper = createMotionAnimatedComponent(GradientHelper);\n\nfunction pointToXY(props: PropsGradient, point: LinearGradientPoint, name: string) {\n    if (point) {\n        props[name + 'X'] = isArray(point) ? point[0] : point.x;\n        props[name + 'Y'] = isArray(point) ? point[1] : point.y;\n    }\n}\n\n// Create MotionLinearGradient with the same API as other Motion components, but it's more complicated because it needs to\n// transform to a different set of props into the AnimatedGradientHelper.\nconst MotionLinearGradient = MemoFnComponent(function <\n    TAnimate,\n    TAnimateProps extends Partial<Omit<LinearGradientProps, 'locations' | 'style'>>\n>(\n    props: MotionComponentProps<\n        ComponentClass<Omit<LinearGradientProps, 'locations'>>,\n        ViewStyle,\n        TAnimate,\n        TAnimateProps,\n        Omit<LinearGradientProps, 'locations' | 'style'>\n    > &\n        LinearGradientProps\n) {\n    const { colors, animateProps, start, end, initialProps, ...propsOut } = props;\n    const { colors: colorsAnimate, start: startAnimate, end: endAnimate, ...animatePropsOut } = animateProps as LinearGradientProps;\n\n    // Split colors array out into individual props so they can be animated\n    colors?.forEach((color, i) => (propsOut['color' + i] = color));\n    colorsAnimate?.forEach((color, i) => (animatePropsOut['color' + i] = color));\n\n    // Split start/end objects out into individual props so they can be animated\n    pointToXY(propsOut, start, 'start');\n    pointToXY(propsOut, end, 'end');\n\n    pointToXY(animatePropsOut, startAnimate, 'start');\n    pointToXY(animatePropsOut, endAnimate, 'end');\n\n    let numColors = colors?.length || colorsAnimate?.length || 0;\n\n    // Split initialProps too if it exists\n    const initialPropsOut: Partial<LinearGradientProps> = {};\n    if (initialProps) {\n        const { colors: colorsInitial, start: startInitial, end: endInitial } = animateProps as LinearGradientProps;\n        colorsInitial?.forEach((color, i) => (initialPropsOut['color' + i] = color));\n        pointToXY(initialPropsOut, startInitial, 'start');\n        pointToXY(initialPropsOut, endInitial, 'end');\n\n        if (colorsInitial) {\n            numColors = colorsInitial.length;\n        }\n    }\n\n    // @ts-ignore Ignore this because it won't conform to the customized props\n    return <AnimatedGradientHelper numColors={numColors} {...propsOut} initialProps={initialPropsOut} animateProps={animatePropsOut} />;\n});\n\nexport { setLinearGradientComponent, MotionLinearGradient };\n"],"mappings":"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","ignoreList":[]}